# File: main.py
# Version: C·∫•u h√¨nh ch·∫ø ƒë·ªô ch·∫°y t·ª± ƒë·ªông (CREATE_NEW/APPEND)

import os
import logging
import sys
import shutil
import logging.handlers

# --- B∆∞·ªõc 1: Thi·∫øt l·∫≠p sys.path ƒê·∫¶U TI√äN ---
# ƒê·∫£m b·∫£o c√°c module trong th∆∞ m·ª•c g·ªëc (SOURCE) c√≥ th·ªÉ ƒë∆∞·ª£c import
SOURCE_DIR = os.path.dirname(os.path.abspath(__file__))
if SOURCE_DIR not in sys.path:
    sys.path.insert(0, SOURCE_DIR)

# --- B∆∞·ªõc 2: Import c√°c module c·∫ßn thi·∫øt ---
# Import settings tr∆∞·ªõc ti√™n ƒë·ªÉ c√°c module kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
try:
    from config import settings
except (ImportError, EnvironmentError) as e:
    print(f"FATAL: L·ªói nghi√™m tr·ªçng khi import ho·∫∑c ki·ªÉm tra settings. L·ªói: {e}")
    sys.exit(1)

# Import c√°c module c·ªßa d·ª± √°n
try:
    from src.context_builder import ContextBuilder
    from src.neo4j_handler import Neo4jHandler
    from src.knowledge_graph_builder import KnowledgeGraphBuilder
    from src.ask_monica import _setup_loggers_if_not_configured as setup_ask_monica_loggers
    import src.cq_parser as cq_parser
    import src.owl_handler as owl_handler
except ImportError as e:
    print(f"FATAL: Kh√¥ng th·ªÉ import c√°c module d·ª± √°n. H√£y ch·∫Øc ch·∫Øn c√°c file __init__.py t·ªìn t·∫°i. L·ªói: {e}")
    sys.exit(1)

# --- B∆∞·ªõc 3: Thi·∫øt l·∫≠p Logger cho main.py ---
main_logger = logging.getLogger("MainPipeline")
main_logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Handler cho vi·ªác in log ra console
main_ch = logging.StreamHandler(sys.stdout)
main_ch.setFormatter(formatter)
main_logger.addHandler(main_ch)
main_logger.propagate = False # NgƒÉn log b·ªã l·∫∑p l·∫°i b·ªüi root logger

# Handler cho vi·ªác ghi log ra file (s·∫Ω ƒë∆∞·ª£c thi·∫øt l·∫≠p trong h√†m)
main_log_file_path = os.path.join(settings.OUTPUT_DIR, "main_pipeline.log")
main_fh = None

def setup_main_file_logger(mode='a'):
    """Thi·∫øt l·∫≠p ho·∫∑c thi·∫øt l·∫≠p l·∫°i file handler cho main logger."""
    global main_fh
    if main_fh:
        main_logger.removeHandler(main_fh)
        main_fh.close()
    try:
        # settings.py ƒë√£ ƒë·∫£m b·∫£o th∆∞ m·ª•c n√†y t·ªìn t·∫°i
        os.makedirs(settings.OUTPUT_DIR, exist_ok=True)
        main_fh = logging.FileHandler(main_log_file_path, encoding='utf-8', mode=mode)
        main_fh.setFormatter(formatter)
        main_logger.addHandler(main_fh)
        main_logger.info(f"File logger cho MainPipeline ƒë∆∞·ª£c thi·∫øt l·∫≠p/m·ªü l·∫°i (mode: {mode}).")
    except Exception as e:
        main_logger.error(f"Kh√¥ng th·ªÉ t·∫°o/m·ªü l·∫°i file logger cho MainPipeline t·∫°i {main_log_file_path}: {e}.")

# --- H√ÄM TI·ªÜN √çCH ---
def close_all_file_handlers():
    """T√¨m, ƒë√≥ng v√† g·ª° b·ªè t·∫•t c·∫£ c√°c FileHandler ƒëang m·ªü ƒë·ªÉ cho ph√©p x√≥a file."""
    loggers = [logging.getLogger(name) for name in logging.root.manager.loggerDict]
    loggers.append(logging.getLogger()) # Bao g·ªìm c·∫£ root logger

    main_logger.info("B·∫Øt ƒë·∫ßu ƒë√≥ng v√† g·ª° b·ªè t·∫•t c·∫£ c√°c file logging handlers...")
    for logger in loggers:
        for handler in logger.handlers[:]: # L·∫∑p tr√™n m·ªôt b·∫£n sao
            if isinstance(handler, logging.FileHandler):
                try:
                    handler_path = getattr(handler, 'baseFilename', 'Kh√¥ng x√°c ƒë·ªãnh')
                    main_logger.debug(f"ƒêang ƒë√≥ng handler cho file: {handler_path} c·ªßa logger '{logger.name}'")
                    handler.close()
                    logger.removeHandler(handler)
                except Exception as e:
                    main_logger.warning(f"L·ªói khi ƒë√≥ng handler cho file {getattr(handler, 'baseFilename', 'N/A')}: {e}")
    main_logger.info("Ho√†n t·∫•t vi·ªác ƒë√≥ng v√† g·ª° b·ªè c√°c file logging handlers.")

def reset_project_state(output_dir: str, neo4j_handler: Neo4jHandler) -> bool:
    """X√≥a n·ªôi dung th∆∞ m·ª•c output v√† d·ªØ li·ªáu trong Neo4j."""
    main_logger.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh reset tr·∫°ng th√°i d·ª± √°n...")
    all_successful = True

    # X√≥a th∆∞ m·ª•c output
    main_logger.info(f"ƒêang x√≥a n·ªôi dung trong th∆∞ m·ª•c output: {output_dir}")
    if os.path.isdir(output_dir):
        # Gi·ªØ l·∫°i c√°c th∆∞ m·ª•c r·ªóng, ch·ªâ x√≥a file
        for item in os.listdir(output_dir):
            item_path = os.path.join(output_dir, item)
            try:
                if os.path.isfile(item_path):
                    os.unlink(item_path)
                elif os.path.isdir(item_path): # X√≥a th∆∞ m·ª•c con v√† n·ªôi dung c·ªßa n√≥
                    shutil.rmtree(item_path)
            except Exception as e:
                main_logger.error(f"L·ªói khi x√≥a '{item_path}': {e}", exc_info=True)
                all_successful = False
    
    # X√≥a d·ªØ li·ªáu Neo4j
    main_logger.info("ƒêang x√≥a to√†n b·ªô d·ªØ li·ªáu trong Neo4j...")
    if not neo4j_handler.clear_database():
        main_logger.error("L·ªánh x√≥a d·ªØ li·ªáu Neo4j th·∫•t b·∫°i.")
        all_successful = False

    if all_successful:
        main_logger.info("‚úÖ Qu√° tr√¨nh reset tr·∫°ng th√°i d·ª± √°n ho√†n t·∫•t th√†nh c√¥ng.")
    else:
        main_logger.error("‚ùå Qu√° tr√¨nh reset tr·∫°ng th√°i d·ª± √°n c√≥ l·ªói.")
    return all_successful

# --- H√ÄM CH√çNH: RUN_PIPELINE ---
def run_pipeline():
    """Th·ª±c thi to√†n b·ªô pipeline c·ªßa d·ª± √°n."""
    # B∆∞·ªõc 0: Ki·ªÉm tra c·∫•u h√¨nh v√† kh·ªüi t·∫°o k·∫øt n·ªëi
    try:
        settings.check_critical_settings()
        main_logger.info("C√°c c·∫•u h√¨nh quan tr·ªçng ƒë√£ ƒë∆∞·ª£c x√°c minh.")
        neo4j_handler = Neo4jHandler()
        if not neo4j_handler.driver:
            main_logger.critical("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Neo4j driver. D·ª´ng pipeline.")
            return
        main_logger.info("‚úÖ Neo4jHandler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
    except Exception as e:
        main_logger.critical(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o: {e}", exc_info=True)
        return

    # --- ƒê·ªçc ch·∫ø ƒë·ªô ch·∫°y t·ª´ settings v√† th·ª±c hi·ªán reset n·∫øu c·∫ßn ---
    if settings.PIPELINE_MODE == 'CREATE_NEW':
        main_logger.info("Ch·∫ø ƒë·ªô 'T·∫°o m·ªõi' ƒë∆∞·ª£c k√≠ch ho·∫°t. ƒêang reset tr·∫°ng th√°i d·ª± √°n...")
        close_all_file_handlers() # ƒê√≥ng file log tr∆∞·ªõc khi x√≥a
        if reset_project_state(settings.OUTPUT_DIR, neo4j_handler):
            # Thi·∫øt l·∫≠p l·∫°i logger ƒë·ªÉ ghi v√†o file m·ªõi
            setup_main_file_logger(mode='w')
            setup_ask_monica_loggers()
            main_logger.info("‚úÖ Tr·∫°ng th√°i d·ª± √°n ƒë√£ ƒë∆∞·ª£c reset.")
        else:
            main_logger.error("Reset d·ª± √°n th·∫•t b·∫°i. D·ª´ng pipeline ƒë·ªÉ tr√°nh c√°c l·ªói kh√¥ng mong mu·ªën.")
            if neo4j_handler: neo4j_handler.close()
            return
    elif settings.PIPELINE_MODE == 'APPEND':
        # V·ªõi ch·∫ø ƒë·ªô APPEND, ch√∫ng ta s·∫Ω ghi ti·∫øp v√†o file log c≈© (n·∫øu c√≥)
        setup_main_file_logger(mode='a')
        main_logger.info("Ch·∫ø ƒë·ªô 'B·ªï sung' ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua b∆∞·ªõc reset.")
    else:
        setup_main_file_logger(mode='a')
        main_logger.error(f"Ch·∫ø ƒë·ªô pipeline '{settings.PIPELINE_MODE}' kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 'CREATE_NEW' ho·∫∑c 'APPEND'. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        if neo4j_handler: neo4j_handler.close()
        return

    main_logger.info("üöÄ B·∫ÆT ƒê·∫¶U PIPELINE X√ÇY D·ª∞NG TRI TH·ª®C üöÄ")
    
    # C√°c b∆∞·ªõc pipeline c√≤n l·∫°i...
    # --- B∆∞·ªõc 1: X√¢y d·ª±ng Project Context ---
    main_logger.info("--- B∆∞·ªõc 1: X√¢y d·ª±ng Project Context ---")
    project_context_summary = "Kh√¥ng c√≥ context"
    context_builder = ContextBuilder(
        project_description="M·ªôt h·ªá th·ªëng ph√¢n t√≠ch vƒÉn b·∫£n l·ªãch s·ª≠, tr√≠ch xu·∫•t th√¥ng tin kh√≥a v√† x√¢y d·ª±ng ƒë·ªì th·ªã tri th·ª©c.",
        project_goal="T·∫°o ra m·ªôt ƒë·ªì th·ªã tri th·ª©c v√† ontology c√≥ th·ªÉ truy v·∫•n ƒë∆∞·ª£c t·ª´ c√°c t√†i li·ªáu vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p."
    )
    context_builder.run_pipeline(
        cq_questions_path=os.path.join(settings.CQ_DIR, "CQ_questions.txt"),
    )
    if context_builder.project_context_summary:
        project_context_summary = context_builder.project_context_summary
        main_logger.info("‚úÖ Project context ƒë√£ ƒë∆∞·ª£c x√¢y d·ª±ng v√† t·∫£i.")
    else:
        main_logger.warning("Kh√¥ng t·∫°o ƒë∆∞·ª£c project context. C√°c b∆∞·ªõc sau c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng.")

    # --- B∆∞·ªõc 2: X√¢y d·ª±ng Ontology t·ª´ CQ Answers ---
    main_logger.info("--- B∆∞·ªõc 2: X√¢y d·ª±ng Ontology t·ª´ CQ Answers ---")
    cq_answers_path = os.path.join(settings.OUTPUT_DIR, settings.CQ_ANSWERS_FILENAME)
    seed_ontology_path = os.path.join(settings.DATA_DIR, 'seed_ontology.owl')
    project_ontology_path = os.path.join(settings.OWL_OUTPUT_DIR, settings.DEFAULT_OWL_FILENAME)

    if os.path.exists(cq_answers_path) and os.path.exists(seed_ontology_path):
        main_logger.info(f"Ph√¢n t√≠ch c√°c ƒë·ªãnh nghƒ©a t·ª´ '{cq_answers_path}'...")
        class_defs, prop_defs, rel_defs = cq_parser.parse_cq_answers_for_ontology(cq_answers_path)

        if class_defs or prop_defs or rel_defs:
            main_logger.info(f"T·∫£i ontology h·∫°t gi·ªëng t·ª´ '{seed_ontology_path}'...")
            seed_onto = owl_handler.load_ontology(seed_ontology_path)
            if seed_onto:
                main_logger.info("C·∫≠p nh·∫≠t ontology h·∫°t gi·ªëng v·ªõi c√°c ƒë·ªãnh nghƒ©a m·ªõi...")
                if owl_handler.update_ontology_with_definitions(
                    onto=seed_onto, class_definitions=class_defs, prop_definitions=prop_defs,
                    rel_definitions=rel_defs, save_path=project_ontology_path
                ):
                    main_logger.info(f"‚úÖ Ontology d·ª± √°n ƒë√£ ƒë∆∞·ª£c x√¢y d·ª±ng v√† l∆∞u t·∫°i: {project_ontology_path}")
                else:
                    main_logger.error("L·ªói khi c·∫≠p nh·∫≠t ho·∫∑c l∆∞u ontology d·ª± √°n.")
            else:
                main_logger.error(f"Kh√¥ng th·ªÉ t·∫£i ontology h·∫°t gi·ªëng t·ª´ '{seed_ontology_path}'.")
        else:
            main_logger.warning("Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a n√†o t·ª´ file CQ answers.")
    else:
        main_logger.warning(f"Kh√¥ng t√¨m th·∫•y file '{cq_answers_path}' ho·∫∑c '{seed_ontology_path}'. B·ªè qua b∆∞·ªõc x√¢y d·ª±ng ontology.")
    
    # --- B∆∞·ªõc 3: Kh·ªüi t·∫°o v√† X√¢y d·ª±ng Knowledge Graph ---
    main_logger.info("--- B∆∞·ªõc 3: Kh·ªüi t·∫°o v√† X√¢y d·ª±ng Knowledge Graph ---")
    kg_builder = KnowledgeGraphBuilder(
        neo4j_handler=neo4j_handler,
        project_context=project_context_summary
    )
    
    if not os.path.isdir(settings.INPUT_TEXT_DIR):
        main_logger.warning(f"Th∆∞ m·ª•c ƒë·∫ßu v√†o '{settings.INPUT_TEXT_DIR}' kh√¥ng t√¨m th·∫•y.")
    else:
        main_logger.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√°c file ƒë·∫ßu v√†o t·ª´ '{settings.INPUT_TEXT_DIR}'...")
        for filename in sorted(os.listdir(settings.INPUT_TEXT_DIR)):
            if filename.lower().endswith(".txt"):
                file_path = os.path.join(settings.INPUT_TEXT_DIR, filename)
                main_logger.info(f"--- ƒêang x·ª≠ l√Ω file: {filename} ---")
                
                extracted_info = context_builder.extract_information_from_file(file_path)
                
                if not extracted_info:
                    main_logger.warning(f"Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ '{filename}'. B·ªè qua.")
                    continue
                main_logger.info(f"ƒê√£ tr√≠ch xu·∫•t {len(extracted_info)} m·∫©u th√¥ng tin t·ª´ '{filename}'.")

                try:
                    kg_builder.process_extracted_info_to_graph(
                        extracted_info_list=extracted_info,
                        ontology_path=project_ontology_path,
                        source_identifier=filename
                    )
                except Exception as e:
                     main_logger.error(f"L·ªói nghi√™m tr·ªçng khi x√¢y d·ª±ng KG cho file '{filename}': {e}", exc_info=True)

    main_logger.info("--- B∆∞·ªõc 4: D·ªçn d·∫πp ---")
    if neo4j_handler:
        neo4j_handler.close()
    main_logger.info("üèÅ PIPELINE ƒê√É HO√ÄN T·∫§T. üèÅ")

# --- ƒêi·ªÉm v√†o c·ªßa ch∆∞∆°ng tr√¨nh ---
if __name__ == "__main__":
    try:
        run_pipeline()
    except Exception as e:
        main_logger.critical(f"L·ªñI KH√îNG X√ÅC ƒê·ªäNH TRONG PIPELINE: {e}", exc_info=True)
    finally:
        main_logger.info("ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c file log ƒë√£ ƒë∆∞·ª£c ƒë√≥ng khi k·∫øt th√∫c.")
        close_all_file_handlers()
        logging.shutdown()