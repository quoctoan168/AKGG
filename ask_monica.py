import requests
import json
from prompt_builder import Prompt

def read_API_key(file_path, model_name):
    """ƒê·ªçc API key t·ª´ file theo t√™n model."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                if line.strip().startswith(f"{model_name}:"):
                    return line.split(":", 1)[1].strip()
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y API key cho model '{model_name}' trong file.")
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file '{file_path}'.")
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc API key: {e}")
    return None


def ask_monica(prompt, model="gpt-4o", key_file="API_Key.txt"):
    """G·ª≠i prompt t·ªõi Monica v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng chu·ªói."""
    API_KEY = read_API_key(key_file, "monica")
    ENDPOINT = "https://openapi.monica.im/v1/chat/completions"

    if not API_KEY:
        return None

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": model,
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    }
                ]
            }
        ],
        "temperature": 0.7,
        "stream": False
    }

    try:
        response = requests.post(ENDPOINT, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()

        # Tr·∫£ v·ªÅ n·ªôi dung tr·∫£ l·ªùi
        return result["choices"][0]["message"]["content"].strip()

    except requests.exceptions.HTTPError as http_err:
        print(f"\nüî¥ L·ªói HTTP: {http_err}")
        print(response.text)
    except requests.exceptions.RequestException as err:
        print(f"\nüî¥ L·ªói g·ª≠i y√™u c·∫ßu: {err}")
    except Exception as e:
        print(f"\nüî¥ L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
    
    return None

# Kh·ªüi t·∫°o prompt
my_prompt = Prompt(
    task_description="Sinh ontology t·ª´ m√¥ t·∫£ nghi·ªáp v·ª•.",
    context="M√¥ h√¨nh ph·ª•c v·ª• h·ªá th·ªëng qu·∫£n l√Ω ƒë√†o t·∫°o t·∫°i ƒë·∫°i h·ªçc.",
    input_data="C√°c th·ª±c th·ªÉ g·ªìm Sinh vi√™n, M√¥n h·ªçc, Gi·∫£ng vi√™n, L·ªãch h·ªçc.",
    goal="X√°c ƒë·ªãnh class, thu·ªôc t√≠nh, m·ªëi quan h·ªá v√† r√†ng bu·ªôc c∆° b·∫£n.",
    output_format="D∆∞·ªõi d·∫°ng OWL c∆° b·∫£n, ho·∫∑c d·∫°ng b·∫£ng ƒë∆°n gi·∫£n ph√¢n lo·∫°i r√µ.",
    constraints="Ch·ªâ m√¥ h√¨nh h√≥a ki·∫øn th·ª©c c·ªët l√µi, tr√°nh d∆∞ th·ª´a.",
    instructions="Tr√¨nh b√†y s√∫c t√≠ch, r√µ r√†ng, chia m·ª•c h·ª£p l√Ω."
)

# Sinh n·ªôi dung t·ª´ class
full_prompt = my_prompt.build()

reply = ask_monica(full_prompt)
if reply:
    print("\nüü¢ Ph·∫£n h·ªìi t·ª´ Monica:")
    print(reply)